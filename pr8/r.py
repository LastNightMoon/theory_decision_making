import numpy as np
import pandas as pd

budget = 400
step = 20
n = 6

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–æ—Ö–æ–¥—ã (f_k(x)), x –æ—Ç 0 –¥–æ 400 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —à–∞–≥–æ–º 20 (21 –∑–Ω–∞—á–µ–Ω–∏–µ)
–¥–æ—Ö–æ–¥—ã = [
    [0, 3, 5, 8, 10, 12, 15, 18, 20, 22, 25, 27, 30, 32, 35, 38, 40, 42, 45, 48, 50],
    [0, 2, 4, 6, 9, 11, 13, 15, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42],
    [0, 1, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23, 26, 29, 31, 33, 35, 37, 39, 41],
    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 25, 28, 31, 34, 36, 39, 41, 43, 45],
    [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 24, 26, 28, 31, 33, 35, 38, 40, 42],
    [0, 3, 5, 7, 9, 11, 13, 16, 18, 20, 22, 24, 27, 30, 32, 35, 38, 41, 44, 46, 48],
]
# budget = 200
# step = 40
# n = 4
#
#
# # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏ –¥–ª—è f_k(0)
# –¥–æ—Ö–æ–¥—ã = [
#     [0, 8, 10, 11, 12, 18],  # f1(x)
#     [0, 6, 9, 11, 13, 15],   # f2(x)
#     [0, 3, 4, 7, 11, 18],    # f3(x)
#     [0, 4, 6, 8, 13, 16],    # f4(x)
# ]


num_enterprises = n


def profit_from_table(enterprise, x, profit_table):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Ö–æ–¥ f_k(x) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è enterprise –∏ —Å—É–º–º—ã x."""
    if x == 0:
        return 0
    x_values = profit_table[enterprise][:, 0]
    idx = np.where(x_values == x)[0]
    if len(idx) == 0:
        return 0
    return profit_table[enterprise][idx[0], 1]


def print_allocation_table(initial_funds, profit_table):
    global step, num_enterprises
    steps = [i for i in range(0, initial_funds + step, step)]

    # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    optimal_profits = np.zeros((len(steps), num_enterprises + 1))
    allocations = np.zeros((len(steps), num_enterprises), dtype=int)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: –ø—Ä–∏–±—ã–ª—å = –¥–æ—Ö–æ–¥ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ä–µ–¥—Å—Ç–≤
    for i, remaining_funds in enumerate(steps):
        optimal_profits[i, num_enterprises] = profit_from_table(num_enterprises - 1, remaining_funds, profit_table)
        allocations[i, num_enterprises - 1] = remaining_funds

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É
    for k in range(num_enterprises - 1, 0, -1):
        for i, remaining_funds in enumerate(steps):
            max_profit = -1
            best_alloc = 0
            for alloc in steps:
                if alloc <= remaining_funds:
                    idx_next = steps.index(remaining_funds - alloc)
                    current_profit = profit_from_table(k - 1, alloc, profit_table) + optimal_profits[idx_next, k + 1]
                    if current_profit > max_profit:
                        max_profit = current_profit
                        best_alloc = alloc
            optimal_profits[i, k] = max_profit
            allocations[i, k - 1] = best_alloc

    # –ü–µ—á–∞—Ç—å –ø–µ—Ä–≤–æ–π –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¢–∞–±–ª–∏—Ü–∞ 1) –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è ùëì6
    print(
        f"{'ùúâùëò‚àí1':<10}{'ùë•ùëò':<10}{'ùúâùëò':<10}"
        f"{'ùëì5(ùë•5)':<10}{'Z*(ùúâ5)':<10}{'Z5(ùúâ4,ùë•5)':<15}"
        f"{'ùëì4(ùë•4)':<10}{'Z*(ùúâ4)':<10}{'Z4(ùúâ3,ùë•4)':<15}"
        f"{'ùëì3(ùë•3)':<10}{'Z*(ùúâ3)':<10}{'Z3(ùúâ2,ùë•3)':<15}"
        f"{'ùëì2(ùë•2)':<10}{'Z*(ùúâ2)':<10}{'Z2(ùúâ1,ùë•2)':<15}"
        f"{'ùëì1(ùë•1)':<10}{'Z*(ùúâ1)':<10}{'Z1(ùúâ0,ùë•1)':<15}"
    )

    detailed_rows = []

    for xi_k_minus_1 in range(step, initial_funds + 1, step):
        for alloc in steps:
            if alloc <= xi_k_minus_1:
                xi_k = xi_k_minus_1 - alloc
                profits = []
                z_stars = []
                z_ks = []
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è —Å—á–∏—Ç–∞–µ–º f_k(x_k), Z*(ùúâ_k) –∏ Z_k(ùúâ_{k-1}, x_k)
                # –ù–æ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å 5-–≥–æ –ø–æ 1-–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
                for i in range(num_enterprises):
                    f_val = profit_from_table(i, alloc, profit_table)
                    profits.append(f_val)
                    if i < num_enterprises - 1:
                        idx_xi_k = steps.index(xi_k)
                        z_star = optimal_profits[idx_xi_k, i + 2]  # –ë–µ—Ä–µ–º Z* –∏–∑ optimal_profits
                    else:
                        z_star = 0
                    z_stars.append(z_star)
                    z_ks.append(f'{int(f_val)} + {int(z_star)} = {int(f_val + z_star)}')

                # –í—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
                if alloc == steps[1]:
                    print(f"{xi_k_minus_1:<10}{alloc:<10}{xi_k:<10}", end="")
                else:
                    print(f"{'':<10}{alloc:<10}{xi_k:<10}", end="")

                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å 5-–≥–æ –ø–æ 1-–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ (–∏–Ω–¥–µ–∫—Å—ã 4..0)
                for i in range(num_enterprises - 2, -1, -1):
                    print(f"{profits[i]:<10}{z_stars[i]:<10}{z_ks[i]:<15}", end="")
                print()

                row = {
                    "Œæk-1": xi_k_minus_1, "xk": alloc, "Œæk": xi_k,
                }
                for i in range(num_enterprises):
                    row[f"f{i + 1}(x{i + 1})"] = profits[i]
                    row[f"Z*(Œæ{i + 1})"] = z_stars[i]
                    row[f"Z{i + 1}(Œæk-1,x{i + 1})"] = z_ks[i]
                detailed_rows.append(row)

    # –ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¢–∞–±–ª–∏—Ü–∞ 2) ‚Äî –∑–¥–µ—Å—å

    print("\n\n–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê (–¢–∞–±–ª–∏—Ü–∞ 2):")
    print(f"{'ùúâ':<10}", end="")
    for k in range(num_enterprises, 0, -1):  # —Å 6 –¥–æ 1 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        print(f"{'Z*' + str(k):<10}{'x*' + str(k):<10}", end="")
    print()

    summary_data = []

    for i, xi in enumerate(steps[1:]):
        print(f"{xi:<10}", end="")
        row = {"Œæ": xi}
        for j in reversed(range(num_enterprises)):
            print(f"{optimal_profits[i + 1, j + 1]:<10.0f}{allocations[i + 1, j]:<10}", end="")
            row[f"Z*{j + 1}"] = optimal_profits[i + 1, j + 1]
            row[f"x*{j + 1}"] = allocations[i + 1, j]
        summary_data.append(row)
        print()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    print("\n\n–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ (–±–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è):")
    current_funds = initial_funds
    allocation_plan = []

    for step in range(num_enterprises):
        idx = steps.index(current_funds)
        x_star = allocations[idx, step]
        allocation_plan.append(x_star)
        current_funds -= x_star

    total_profit = optimal_profits[steps.index(initial_funds), 1]

    final_rows = []
    for i, x in enumerate(allocation_plan):
        print(f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é {i + 1} –≤—ã–¥–µ–ª–∏—Ç—å: {x} –º–ª–Ω. —Ä—É–±.")
        final_rows.append({"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ": f"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ {i + 1}", "–í—ã–¥–µ–ª–µ–Ω–æ (–º–ª–Ω —Ä—É–±.)": x})

    print(f"\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥: {total_profit} –º–ª–Ω. —Ä—É–±.")
    final_rows.append({"–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ": "–°—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å", "–í—ã–¥–µ–ª–µ–Ω–æ (–º–ª–Ω —Ä—É–±.)": total_profit})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    writer = pd.ExcelWriter("tables.xlsx", engine='openpyxl')

    # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¢–∞–±–ª–∏—Ü–∞ 1) ‚Äî –±–µ–∑ 6-–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
    columns_order = ["Œæk-1", "xk", "Œæk"]
    for i in range(n - 1, 0, -1):
        columns_order.extend([
            f"f{i}(x{i})",
            f"Z*(Œæ{i})",
            f"Z{i}(Œæk-1,x{i})"
        ])

    df_detailed = pd.DataFrame(detailed_rows)
    df_detailed = df_detailed[columns_order]
    df_detailed.to_excel(writer, sheet_name="–¢–∞–±–ª–∏—Ü–∞ 1 (–ø–æ–¥—Ä–æ–±–Ω–∞—è)", index=False)

    # –î–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¢–∞–±–ª–∏—Ü–∞ 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å 6-–≥–æ –ø–æ 1-–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
    df_summary = pd.DataFrame(summary_data)
    # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã ‚Äî —Å 6 –¥–æ 1
    summary_columns = ["Œæ"]
    for i in range(num_enterprises, 0, -1):
        summary_columns.extend([f"Z*{i}", f"x*{i}"])
    df_summary = df_summary[summary_columns]
    df_summary.to_excel(writer, sheet_name="–¢–∞–±–ª–∏—Ü–∞ 2 (–∏—Ç–æ–≥–æ–≤–∞—è)", index=False)

    pd.DataFrame(final_rows).to_excel(writer, sheet_name="–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", index=False)

    writer.close()
    print("\n–¢–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: tables.xlsx")


# –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è 6 –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç profit_table: —Å–ø–∏—Å–æ–∫ np.array([[x, f(x)], ...])
profit_table = []

for firm in –¥–æ—Ö–æ–¥—ã:
    firm_table = []
    for i, f in enumerate(firm):
        x = i * step  # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
        firm_table.append([x, f])
    profit_table.append(np.array(firm_table))

# –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
initial_funds = budget

# –ó–∞–ø—É—Å–∫
print_allocation_table(initial_funds, profit_table)
